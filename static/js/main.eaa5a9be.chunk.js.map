{"version":3,"sources":["logo.svg","post/component.js","lookup/compoent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PostsComponent","props","textAreaRef","React","createRef","useState","newPosts","setNewPosts","className","onSubmit","event","preventDefault","console","log","newValue","current","value","tempNewPosts","unshift","content","likes","id","ref","required","name","type","PostList","postsInit","setPostsInit","posts","setPosts","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadPosts","alert","map","item","index","Post","post","key","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","postEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eaa5a9be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useEffect, useState}  from 'react'\r\n\r\nimport {loadPosts} from '../lookup'\r\n\r\nexport function PostsComponent(props) {\r\n    const textAreaRef = React.createRef()\r\n    const [newPosts, setNewPosts] = useState([])\r\n    const handleSubmit = (event) =>{\r\n        event.preventDefault()\r\n        console.log(event)\r\n        const newValue = textAreaRef.current.value\r\n        let tempNewPosts = [...newPosts]\r\n        tempNewPosts.unshift({\r\n            content: newValue,\r\n            likes : 0,\r\n            id : 123\r\n        })\r\n        setNewPosts(tempNewPosts)\r\n        textAreaRef.current.value = ''\r\n    }\r\n      return <div className={props.className}>\r\n          <div className='col-10 my-3 '>\r\n          <form  onSubmit={handleSubmit}>\r\n             <textarea ref={textAreaRef} required={true} className='form-control' name='post'>\r\n\r\n             </textarea>\r\n             <button type='submit' className='btn btn-primary  my-3'>Post</button>\r\n          </form>\r\n         </div>\r\n          <PostList newPosts = {newPosts} />\r\n    </div>\r\n}\r\n\r\nexport function PostList(props) {\r\n    const [postsInit, setPostsInit] = useState([])\r\n    const [posts, setPosts] = useState([])\r\n    useEffect(() =>{\r\n        const final = [...props.newPosts].concat(postsInit)\r\n        if (final.length !== posts.length){\r\n              setPosts(final)\r\n        }\r\n\r\n    },[props.newPosts, posts, postsInit])\r\n    useEffect(() => {\r\n      const myCallback = (response, status) => {\r\n        if (status === 200){\r\n          setPostsInit(response)\r\n        } else {\r\n          alert(\"There was an error\")\r\n        }\r\n      }\r\n      loadPosts(myCallback)\r\n    }, [postsInit])\r\n    return posts.map((item, index)=>{\r\n      return <Post post={item} className='col-10 my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`} />\r\n    })\r\n  }\r\n\r\n\r\nexport function ActionBtn(props) {\r\n    const {post, action} = props\r\n    const [likes, setLikes] = useState(post.likes ? post.likes : 0)\r\n    const [userLike, setUserLike] = useState(post.userLike === true ? true : false)\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n\r\n    const handleClick = (event) => {\r\n      event.preventDefault()\r\n      if (action.type === 'like') {\r\n        if (userLike === true) {\r\n          // perhaps i Unlike it?\r\n          setLikes(likes - 1)\r\n          setUserLike(false)\r\n        } else {\r\n          setLikes(likes + 1)\r\n          setUserLike(true)\r\n        }\r\n\r\n      }\r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n  }\r\n\r\nexport function Post(props) {\r\n    const {post} = props\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n    return <div className={className}>\r\n        <p>{post.id} - {post.content}</p>\r\n        <div className='btn btn-group'>\r\n          <ActionBtn post={post} action={{type: \"like\", display:\"Likes\"}}/>\r\n\r\n          <ActionBtn post={post} action={{type: \"re-post\", display:\"\"}}/>\r\n        </div>\r\n    </div>\r\n  }","import React from \"react\";\r\n\r\n\r\nexport function loadPosts(callback) {\r\n         const xhr = new XMLHttpRequest()\r\n         const method = 'GET'\r\n         const url = '  http://localhost:8000/api/posts'\r\n         const responseType = 'json'\r\n         xhr.responseType = responseType\r\n         xhr.open(method, url)\r\n         xhr.onload = function () {\r\n             callback(xhr.response, xhr.status)\r\n         }\r\n         xhr.onerror = function (e) {\r\n             console.log(e)\r\n             callback({\"Message\": \"The request was an error!\"}, 400)\r\n    }\r\n         xhr.send()\r\n     }","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { PostsComponent} from \"./post\";\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n         < PostsComponent/>\n        </div>\n\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { PostsComponent } from './post';\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\nif(appEl){\n    ReactDOM.render(<App />, appEl);\n}\n\nconst postEl = document.getElementById('shareme-2')\nif(postEl){\n     ReactDOM.render(<PostsComponent />, postEl);\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}